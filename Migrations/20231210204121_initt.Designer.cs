// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchiftPlanner;

#nullable disable

namespace SchiftPlanner.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231210204121_initt")]
    partial class initt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.CompanyInfo", b =>
                {
                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Company");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Customer_Timetable", b =>
                {
                    b.Property<string>("Timetable_Day")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Timetable")
                        .HasColumnType("int");

                    b.Property<bool>("IsWork")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Timetable_Day");

                    b.HasIndex("Id_Timetable");

                    b.ToTable("Day_Customer_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Worker_Timetable", b =>
                {
                    b.Property<string>("Timetable_Day")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Timetable")
                        .HasColumnType("int");

                    b.Property<bool>("IsWork")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Timetable_Day");

                    b.HasIndex("Id_Timetable");

                    b.ToTable("Day_Worker_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Opinions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anonymously")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<string>("Id_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Company");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Company_Type1", b =>
                {
                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<int>("Id_Work_Group")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Work_Group"));

                    b.Property<string>("Id_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Company");

                    b.ToTable("Company_Type1");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Day_Worker_Claimed", b =>
                {
                    b.Property<string>("Timetable_Day_User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Timetable_Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Timetable_Day_User");

                    b.HasIndex("Timetable_Day");

                    b.ToTable("Day_Worker_Claimed");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Workers", b =>
                {
                    b.Property<string>("Work_Group_User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Company_Type1Id")
                        .HasColumnType("int");

                    b.Property<int>("Id_Work_Group")
                        .HasColumnType("int");

                    b.Property<string>("Id_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Work_Group_User");

                    b.HasIndex("Company_Type1Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Company_Type2", b =>
                {
                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<string>("Id_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Company");

                    b.ToTable("Company_Type2");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Customer_Timetable", b =>
                {
                    b.Property<int>("Id_Timetable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Timetable"));

                    b.Property<DateTime>("Break_after_Client")
                        .HasColumnType("datetime2");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<int>("Simultant")
                        .HasColumnType("int");

                    b.HasKey("Id_Timetable");

                    b.HasIndex("Id_Company");

                    b.ToTable("Customer_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Day_Customer_Claimed", b =>
                {
                    b.Property<string>("Timetable_Day_User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Timetable_Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Timetable_Day_User");

                    b.HasIndex("Timetable_Day");

                    b.ToTable("Day_Customer_Claimed");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Subs.Subscriptions", b =>
                {
                    b.Property<int>("Id_Company")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Company"));

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id_Sub")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id_User")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_Company");

                    b.HasIndex("Id_Sub");

                    b.HasIndex("Id_User");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Subs.Type_Subscriptions", b =>
                {
                    b.Property<string>("Id_Sub")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DateLenght")
                        .HasColumnType("int");

                    b.Property<int>("MaxPersonforPlann")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlann")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("TypeCompany")
                        .HasColumnType("int");

                    b.HasKey("Id_Sub");

                    b.ToTable("Type_Subscriptions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.Option_Answer", b =>
                {
                    b.Property<string>("Question_Location")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question_Location_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text_Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Question_Location");

                    b.ToTable("Option_Answer");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.Question", b =>
                {
                    b.Property<string>("Question_Location")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id_Survey")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Question_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Question_Location");

                    b.HasIndex("Id_Survey");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.SurveysProperties", b =>
                {
                    b.Property<int>("Id_Survey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Survey"));

                    b.Property<bool>("Anonymously")
                        .HasColumnType("bit");

                    b.Property<bool>("Everyone")
                        .HasColumnType("bit");

                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.HasKey("Id_Survey");

                    b.HasIndex("Id_Company");

                    b.ToTable("SurveysProperties");
                });

            modelBuilder.Entity("SchiftPlanner.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Worker_Timetable", b =>
                {
                    b.Property<int>("Id_Timetable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Timetable"));

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<int>("Id_Company")
                        .HasColumnType("int");

                    b.Property<int>("Simultant")
                        .HasColumnType("int");

                    b.HasKey("Id_Timetable");

                    b.HasIndex("Id_Company");

                    b.ToTable("Worker_Timetable");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchiftPlanner.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchiftPlanner.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchiftPlanner.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchiftPlanner.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.CompanyInfo", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Subs.Subscriptions", "Subscriptions")
                        .WithOne("CompanyInfo")
                        .HasForeignKey("SchiftPlanner.Models.Company.CompanyInfo", "Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Customer_Timetable", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Type_2.Customer_Timetable", "Customer_Timetable")
                        .WithMany("Customer_Days")
                        .HasForeignKey("Id_Timetable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Worker_Timetable", b =>
                {
                    b.HasOne("Worker_Timetable", "Worker_Timetable")
                        .WithMany("Worker_Days")
                        .HasForeignKey("Id_Timetable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Opinions", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.CompanyInfo", "CompanyInfo")
                        .WithMany("Opinions")
                        .HasForeignKey("Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Company_Type1", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.CompanyInfo", "Company_Info")
                        .WithOne("Company_Type1")
                        .HasForeignKey("SchiftPlanner.Models.Company.Type_1.Company_Type1", "Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company_Info");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Day_Worker_Claimed", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Day_Worker_Timetable", "Day_Worker_Timetable")
                        .WithMany("Day_Plan_Claimed")
                        .HasForeignKey("Timetable_Day")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day_Worker_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Workers", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Type_1.Company_Type1", "Company_Type1")
                        .WithMany("Workers")
                        .HasForeignKey("Company_Type1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company_Type1");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Company_Type2", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.CompanyInfo", "Company_Info")
                        .WithOne("Company_Type2")
                        .HasForeignKey("SchiftPlanner.Models.Company.Type_2.Company_Type2", "Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company_Info");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Customer_Timetable", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Type_2.Company_Type2", "Company_Type2")
                        .WithMany("Customer_Timetables")
                        .HasForeignKey("Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company_Type2");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Day_Customer_Claimed", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Day_Customer_Timetable", "Day_Customer_Timetable")
                        .WithMany("Day_Plan_Claimed")
                        .HasForeignKey("Timetable_Day")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day_Customer_Timetable");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Subs.Subscriptions", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Subs.Type_Subscriptions", "Type_Subscriptions")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Id_Sub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchiftPlanner.Models.UserModel", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type_Subscriptions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.Option_Answer", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Survey.Question", "Question")
                        .WithMany("Options_Answer")
                        .HasForeignKey("Question_Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.Question", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Survey.SurveysProperties", "SurveysProperties")
                        .WithMany("Questions")
                        .HasForeignKey("Id_Survey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveysProperties");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.SurveysProperties", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.CompanyInfo", "CompanyInfo")
                        .WithMany("SurveysProperties")
                        .HasForeignKey("Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("Worker_Timetable", b =>
                {
                    b.HasOne("SchiftPlanner.Models.Company.Type_1.Company_Type1", "Company_Type1")
                        .WithMany("Worker_Timetables")
                        .HasForeignKey("Id_Company")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company_Type1");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.CompanyInfo", b =>
                {
                    b.Navigation("Company_Type1")
                        .IsRequired();

                    b.Navigation("Company_Type2")
                        .IsRequired();

                    b.Navigation("Opinions");

                    b.Navigation("SurveysProperties");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Customer_Timetable", b =>
                {
                    b.Navigation("Day_Plan_Claimed");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Day_Worker_Timetable", b =>
                {
                    b.Navigation("Day_Plan_Claimed");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_1.Company_Type1", b =>
                {
                    b.Navigation("Worker_Timetables");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Company_Type2", b =>
                {
                    b.Navigation("Customer_Timetables");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Company.Type_2.Customer_Timetable", b =>
                {
                    b.Navigation("Customer_Days");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Subs.Subscriptions", b =>
                {
                    b.Navigation("CompanyInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("SchiftPlanner.Models.Subs.Type_Subscriptions", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.Question", b =>
                {
                    b.Navigation("Options_Answer");
                });

            modelBuilder.Entity("SchiftPlanner.Models.Survey.SurveysProperties", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SchiftPlanner.Models.UserModel", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Worker_Timetable", b =>
                {
                    b.Navigation("Worker_Days");
                });
#pragma warning restore 612, 618
        }
    }
}
